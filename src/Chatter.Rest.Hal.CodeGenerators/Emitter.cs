using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Chatter.Rest.Hal.CodeGenerators;

internal class Emitter
{
	private const int DefaultStringBuilderCapacity = 1024;
	private readonly StringBuilder _builder = new(DefaultStringBuilderCapacity);
	private string _indentSpaces = string.Empty;

	public IReadOnlyList<(string, string)> Emit(IReadOnlyList<Parser.HalResponseClass> halResponseClasses,
		CancellationToken cancellationToken)
	{
		var classes = new List<(string, string)>();
		foreach (Parser.HalResponseClass? halResponseClass in halResponseClasses)
		{
			GenerateCode(halResponseClass);
			string fileNamespace = halResponseClass.Namespace != null ? $"{halResponseClass.Namespace}." : string.Empty;
			classes.Add(($"{fileNamespace}{halResponseClass.Name}.g.cs", _builder.ToString()));
		}

		return classes;
	}

	private void GenerateCode(Parser.HalResponseClass halResponseClass)
	{
		_builder.Clear();
		_indentSpaces = string.Empty;

		AddFileHeader();
		if (halResponseClass.Namespace is { })
		{
			OpenNamespace(halResponseClass.Namespace);
		}

		AddClassDeclaration(halResponseClass.Name);
		if (!halResponseClass.HasLinks)
		{
			AddLinks();
		}

		if (!halResponseClass.HasEmbed)
		{
			AddEmbeds();
		}

		CloseClassDeclaration();
		if (halResponseClass.Namespace is { })
		{
			CloseNamespace();
		}
	}

	private void AddEmbeds()
	{
		_builder.AppendLine($@"{_indentSpaces}[JsonPropertyName(""_embedded"")]");
		_builder.AppendLine($@"{_indentSpaces}public EmbeddedResourceCollection? Embedded {{ get; set; }}");
	}

	private void AddIndent() => _indentSpaces += "    ";

	private void AddLinks()
	{
		_builder.AppendLine($@"{_indentSpaces}[JsonPropertyName(""_links"")]");
		_builder.AppendLine($@"{_indentSpaces}public LinkCollection? Links {{ get; set; }}");
	}

	private void CloseClassDeclaration()
	{
		RemoveIndent();
		_builder.AppendLine($"{_indentSpaces}}}");
	}

	private void RemoveIndent() => _indentSpaces = _indentSpaces.Substring(0, _indentSpaces.Length - 4);

	private void AddClassDeclaration(string name)
	{
		_builder.AppendLine($"{_indentSpaces}partial class {name}");
		_builder.AppendLine($"{_indentSpaces}{{");
		AddIndent();
	}

	private void CloseNamespace()
	{
		RemoveIndent();
		_builder.AppendLine("}");
	}

	private void OpenNamespace(string ns)
	{
		_builder.AppendLine($"namespace {ns}");
		_builder.AppendLine("{");
		AddIndent();
	}

	private void AddFileHeader()
	{
		_builder.AppendLine("// <auto-generated />");
		_builder.AppendLine();
		_builder.AppendLine("using System.Text.Json;");
		_builder.AppendLine("using System.Text.Json.Serialization;");
		_builder.AppendLine("using Chatter.Rest.Hal;");
		_builder.AppendLine();
		_builder.AppendLine("#nullable enable");
		_builder.AppendLine();
	}

	private static string? GetNamespaceFrom(SyntaxNode s) =>
		s.Parent switch
		{
			FileScopedNamespaceDeclarationSyntax fileScopedNamespace => fileScopedNamespace.Name.ToString(),
			NamespaceDeclarationSyntax namespaceDeclarationSyntax => namespaceDeclarationSyntax.Name.ToString(),
			null => null,
			_ => GetNamespaceFrom(s.Parent)
		};
}